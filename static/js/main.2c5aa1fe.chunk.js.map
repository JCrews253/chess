{"version":3,"sources":["components/piece/piece.ts","components/simulation/simulation.ts","Reducers/GameMoves/GameMovesAction.ts","components/Board/Board.tsx","components/Header/Header.tsx","components/SideBar/SideBar.tsx","App.tsx","Reducers/GameMoves/GameMovesReducer.ts","store.ts","index.tsx"],"names":["Piece","Color","GetRow","idx","Math","floor","GetCol","GetIdxByRowCol","row","col","HandleMoves","piece","board","moves","Knight","KnightMoves","index","Rook","RookMoves","Bishop","BishopMoves","Queen","concat","King","KingMoves","Pawn","PawnMoves","push","filter","m","color","cRow","Empty","cCol","CheckForRightCastle","CheckForLeftCastle","Light","firstMove","Dark","CheckForPromotion","rp","lp","boardsChecked","reverseArray","array","slice","reverse","LPawnPosPoints","DPawnPosPoints","KnightPosPoints","LBishopPosPoints","DBishopPosPoints","LRookPosPoints","DRookPosPoints","QueenPosPoints","LKingPosPoints","DKingPosPoints","Simulate","depth","a","cloneBoard","JSON","parse","stringify","bestScore","Infinity","bestMove","start","end","s","forEach","p","None","score","MinMax","isMaximizing","alpha","beta","CalcScore","lightPieces","darkPieces","GetPoints","GameMoves","state","action","type","payload","Board","isLight","isLightPiece","isKing","isQueen","isBishop","isKnight","isRook","isPawn","SwapTurns","setTurn","turn","isSelected","selected","isAvailableMove","availableMoves","includes","isKillingMove","killingMoves","InitializeBoard","newBoard","Array","fill","_","i","MakeAiMove","move","setAiMoveStart","setAiMoveFinish","CreateMoveNotation","setBoard","dispatch","useDispatch","movedPiece","PieceToChar","endPos","IdxToAlphaNumeric","takenPiece","String","fromCharCode","ShowPopUp","useState","SetSelected","setAvailableMoves","setKillingMoves","gameOver","setGameOver","aiMoveStart","aiMoveFinish","useEffect","kMoves","GetMove","lightKing","darkKing","alert","CheckForWin","className","map","join","onClick","HandlePieceClick","key","Header","SideBar","turns","formatted","number","lightMove","darkMove","count","length","FormatMoves","useSelector","undefined","App","initState","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c5aa1fe.chunk.js","sourcesContent":["export interface IPosition{\r\n    piece: Piece,\r\n    color: Color,\r\n    index: number,\r\n    firstMove: boolean\r\n}\r\n\r\nexport enum Piece{\r\n    King,\r\n    Queen,\r\n    Bishop,\r\n    Knight,\r\n    Rook,\r\n    Pawn,\r\n    Empty\r\n}\r\n\r\nexport enum Color{\r\n    Dark,\r\n    Light,\r\n    None\r\n}\r\n\r\nconst GetRow = (idx:number):number => Math.floor( idx / 8 )\r\nconst GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\nconst GetIdxByRowCol = (row:number,col:number):number => 8 * row + col\r\n\r\nexport const HandleMoves = (piece:IPosition,board:IPosition[]):number[] => {\r\n    var moves:number[] = []\r\n    if(piece.piece === Piece.Knight) moves = KnightMoves(piece.index,board) \r\n    if(piece.piece === Piece.Rook) moves = RookMoves(piece.index,board) \r\n    if(piece.piece === Piece.Bishop) moves = BishopMoves(piece.index,board) \r\n    if(piece.piece === Piece.Queen) moves = moves.concat(BishopMoves(piece.index,board)).concat(RookMoves(piece.index,board)) \r\n    if(piece.piece === Piece.King) moves = KingMoves(piece.index,board)\r\n    if(piece.piece === Piece.Pawn) moves = PawnMoves(piece.index,board)\r\n    return moves\r\n}\r\n\r\nexport const KnightMoves = (idx: number,board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row >= 2 && col <= 6) moves.push(GetIdxByRowCol(row-2,col+1))\r\n    if(row >= 1 && col <= 5) moves.push(GetIdxByRowCol(row-1,col+2))\r\n    if(row <= 6 && col <= 5) moves.push(GetIdxByRowCol(row+1,col+2))\r\n    if(row <= 5 && col <= 6) moves.push(GetIdxByRowCol(row+2,col+1))\r\n    if(row <= 5 && col >= 1) moves.push(GetIdxByRowCol(row+2,col-1))\r\n    if(row <= 6 && col >= 2) moves.push(GetIdxByRowCol(row+1,col-2))\r\n    if(row >= 1 && col >= 2) moves.push(GetIdxByRowCol(row-1,col-2))\r\n    if(row >= 2 && col >= 1) moves.push(GetIdxByRowCol(row-2,col-1))\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const RookMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)\r\n    const moves:number[] =[]\r\n    //up\r\n    var cRow = row\r\n    while((cRow - 1 > -1 ) && board[GetIdxByRowCol(cRow-1,col)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,col))\r\n        cRow--\r\n    }\r\n    if(cRow > 0 && board[GetIdxByRowCol(cRow-1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,col))\r\n\r\n    //Right\r\n    var cCol = col\r\n    while((cCol + 1 < 8 && board[GetIdxByRowCol(row,cCol+1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol+1))\r\n        cCol++\r\n    }\r\n    if(cCol < 7 && board[GetIdxByRowCol(row,cCol + 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol+1))\r\n\r\n    //Down\r\n    cRow = row\r\n    while((cRow + 1 < 8 && board[GetIdxByRowCol(cRow+1,col)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(cRow+1,col))\r\n        cRow++\r\n    }\r\n    if(cRow < 7 && board[GetIdxByRowCol(cRow+1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,col))\r\n\r\n    //Left\r\n    cCol = col\r\n    while((cCol - 1 > 0 && board[GetIdxByRowCol(row,cCol-1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol-1))\r\n        cCol--\r\n    }\r\n    if(cCol > 0 && board[GetIdxByRowCol(row,cCol - 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol-1))\r\n\r\n    return moves\r\n}\r\n\r\nexport const BishopMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    //Up Right\r\n    var cRow = row\r\n    var cCol = col\r\n    while(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n        cRow--\r\n        cCol++\r\n    }\r\n    if(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n    \r\n    //Down Right\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n        cRow++\r\n        cCol++\r\n    }\r\n    if(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n\r\n    //Down Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n        cRow++\r\n        cCol--\r\n    }\r\n    if(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n\r\n    //Up Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n        cRow--\r\n        cCol--\r\n    }\r\n    if(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n\r\n\r\n    return moves\r\n}\r\n\r\nexport const KingMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row > 0) moves.push(GetIdxByRowCol(row-1,col)) //up\r\n    if(row > 0 && col < 7) moves.push(GetIdxByRowCol(row-1,col+1)) //up right\r\n    if(col < 7) moves.push(GetIdxByRowCol(row,col+1)) //right\r\n    if(row < 7 && col < 7) moves.push(GetIdxByRowCol(row+1,col+1)) //down right\r\n    if(row < 7) moves.push(GetIdxByRowCol(row+1,col)) //down\r\n    if(row < 7 && col > 0) moves.push(GetIdxByRowCol(row+1,col-1)) //down left\r\n    if(col > 0) moves.push(GetIdxByRowCol(row,col-1)) //left\r\n    if(row > 0 && col > 0) moves.push(GetIdxByRowCol(row-1,col-1)) //up left\r\n\r\n    //castling\r\n    if(CheckForRightCastle(idx,board)){\r\n        moves.push(GetIdxByRowCol(row,col+2))\r\n    }\r\n    if(CheckForLeftCastle(idx,board)){\r\n        moves.push(GetIdxByRowCol(row,col-2))\r\n    }\r\n\r\n\r\n    //Remove check moves\r\n\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const PawnMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n\r\n    if(board[idx].color === Color.Light){\r\n        if(row > 0 && board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row-1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row-2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row-2,col))\r\n            }\r\n        if( col > 0 && row > 0 &&\r\n            board[GetIdxByRowCol(row-1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col-1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col-1))\r\n            }\r\n        if( col < 7 && row > 0 &&\r\n            board[GetIdxByRowCol(row-1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col+1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col+1))\r\n            } \r\n    }\r\n    else{\r\n        if(row < 7 && board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row+1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row+2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row+2,col))\r\n            } \r\n        if(col > 0 && row < 7 &&\r\n            board[GetIdxByRowCol(row+1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col-1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col-1))\r\n            }\r\n        if(col < 7 && row < 7 &&\r\n            board[GetIdxByRowCol(row+1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col+1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col+1))\r\n            } \r\n    }\r\n\r\n\r\n\r\n    //en passant\r\n\r\n    return moves\r\n}\r\n\r\nexport const CheckForPromotion = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].piece === Piece.Pawn){\r\n        if(board[idx].color === Color.Light && idx < 8) return true\r\n        else if(board[idx].color === Color.Dark && idx > 55) return true\r\n        else return false\r\n    }\r\n    else return false\r\n}\r\n\r\nexport const CheckForRightCastle = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].firstMove && board[idx].piece === Piece.King){\r\n        var rp = 1\r\n        while(board[idx+rp].piece === Piece.Empty && rp+GetCol(idx) < 7){\r\n            rp++\r\n        }\r\n        if(board[idx+rp].piece === Piece.Rook && board[idx].color === board[idx+rp].color && board[idx+rp].firstMove){\r\n            return true\r\n        }\r\n        else return false\r\n    }\r\n    else return false\r\n}\r\n\r\nexport const CheckForLeftCastle = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].firstMove && board[idx].piece === Piece.King){\r\n        var lp = 1\r\n        while(board[idx-lp].piece === Piece.Empty && GetCol(idx)-lp > 0){\r\n            lp++\r\n        }\r\n        if(board[idx-lp].piece === Piece.Rook && board[idx].color === board[idx-lp].color && board[idx-lp].firstMove){\r\n            return true\r\n        }\r\n        else return false\r\n    }\r\n    else return false\r\n}","import { IPosition, Color, Piece, HandleMoves, CheckForPromotion} from \"../piece/piece\";\r\n\r\nexport interface Move{\r\n    start: number,\r\n    end: number\r\n}\r\n\r\nexport var boardsChecked:number = 0\r\n\r\nconst KingPoints = 900\r\nconst QueenPoints = 90\r\nconst BishopPoints = 30\r\nconst KnightPoints = 30\r\nconst RookPoints = 50\r\nconst PawnPoints = 10\r\n\r\nvar reverseArray = function(array:number[]) {\r\n    return array.slice().reverse();\r\n};\r\n\r\nconst LPawnPosPoints = [\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n        5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,\r\n        1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0,\r\n        0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5,\r\n        0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0,\r\n        0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5,\r\n        0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5,\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0\r\n    ];\r\n\r\nconst DPawnPosPoints = reverseArray(LPawnPosPoints);\r\n\r\nconst KnightPosPoints = [\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,\r\n        -4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0,\r\n        -3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0,\r\n        -3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0,\r\n        -3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0,\r\n        -3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0,\r\n        -4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0,\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0\r\n    ];\r\n\r\nconst LBishopPosPoints = [\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0,\r\n     -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0,\r\n     -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0,\r\n     -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0,\r\n     -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0,\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst DBishopPosPoints = reverseArray(LBishopPosPoints);\r\n\r\nconst LRookPosPoints = [\r\n      0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n      0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n      0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0\r\n];\r\n\r\nconst DRookPosPoints = reverseArray(LRookPosPoints);\r\n\r\nconst QueenPosPoints = [\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n      0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n     -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst LKingPosPoints = [\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0,\r\n     -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0,\r\n      2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ,\r\n      2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0\r\n];\r\n\r\nconst DKingPosPoints = reverseArray(LKingPosPoints);\r\n\r\nexport const Simulate = async (board:IPosition[], depth:number, color:Color):Promise<Move> => {\r\n    boardsChecked = 0\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    var bestScore = -Infinity\r\n    var bestMove:Move = {start:-1,end:-1}\r\n    var alpha:number = -Infinity\r\n    var beta:number = Infinity\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                firstMove:false,\r\n                index: m,\r\n            }\r\n            if(CheckForPromotion(m,cloneBoard)){\r\n                cloneBoard[m] = {\r\n                    piece: Piece.Queen,\r\n                    color: cloneBoard[p.index].color,\r\n                    index: m,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, false, alpha,beta)\r\n            if(score > bestScore){  \r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    return bestMove\r\n}\r\n\r\nexport const MinMax = (board:IPosition[], depth:number, color:Color, isMaximizing:boolean,alpha:number, beta:number):number => {\r\n    //Make a copy of the board\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    //if the depth reaches the end return the score of the current board\r\n    if(depth <= 0) return CalcScore(cloneBoard)\r\n    //set -inf if maximizing players turn \r\n    var bestScore = isMaximizing ? -Infinity : Infinity\r\n    var bestMove:Move = {start: -1, end: -1}\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                index: m,\r\n                firstMove:false,  \r\n            }\r\n            if(CheckForPromotion(m,cloneBoard)){\r\n                cloneBoard[m] = {\r\n                    piece: Piece.Queen,\r\n                    color: cloneBoard[p.index].color,\r\n                    index: m,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, isMaximizing ? false : true,alpha,beta)       \r\n            if(isMaximizing ? score > bestScore : score < bestScore){\r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    if(bestMove.start !== -1 && bestMove.end !== -1){\r\n        cloneBoard[bestMove.end] = {\r\n            piece: cloneBoard[bestMove.start].piece,\r\n            color: cloneBoard[bestMove.start].color,\r\n            index: bestMove.end,\r\n            firstMove:false,  \r\n        }\r\n        if(CheckForPromotion(bestMove.end,cloneBoard)){\r\n            cloneBoard[bestMove.end] = {\r\n                piece: Piece.Queen,\r\n                color: cloneBoard[bestMove.end].color,\r\n                index: bestMove.end,\r\n                firstMove:false,  \r\n            }\r\n        }\r\n        cloneBoard[bestMove.start] = {\r\n            piece: Piece.Empty,\r\n            color: Color.None,\r\n            index: bestMove.start,\r\n            firstMove:false\r\n        }\r\n        return CalcScore(cloneBoard)\r\n    }\r\n    else return  isMaximizing ? -Infinity : Infinity\r\n}\r\n\r\nconst CalcScore = (board:IPosition[]):number => {\r\n    const lightPieces =  board.filter( s => s.color === Color.Light)\r\n    const darkPieces =  board.filter( s => s.color === Color.Dark)\r\n\r\n    var score = 0\r\n    darkPieces.forEach( p => score+= GetPoints(p))\r\n    lightPieces.forEach( p => score-=GetPoints(p))\r\n    return score\r\n}\r\n\r\nconst GetPoints = (piece:IPosition):number => {\r\n    if(piece.piece === Piece.King ) return KingPoints + ((piece.color === Color.Light) ? LKingPosPoints[piece.index] : DKingPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Queen ) return QueenPoints + QueenPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Bishop ) return BishopPoints + ((piece.color === Color.Light) ? LBishopPosPoints[piece.index] : DBishopPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Knight ) return KnightPoints + KnightPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Rook ) return RookPoints + ((piece.color === Color.Light) ? LRookPosPoints[piece.index] : DRookPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Pawn ) return PawnPoints + ((piece.color === Color.Light) ? LPawnPosPoints[piece.index] : DPawnPosPoints[piece.index])\r\n    else return 0\r\n} ","export type addMove = {\r\n    type: \"ADD_MOVE\",\r\n    payload: string\r\n}\r\n\r\nexport type clearMoves = {\r\n    type: \"CLEAR_MOVES\",\r\n    payload: string\r\n}\r\n\r\nexport const GameMoves = (state:string, action:GameMoveActions):GameMoveDispatchTypes => ({\r\n    type: action,\r\n    payload: state\r\n})\r\n\r\nexport type GameMoveActions = \"ADD_MOVE\" | \"CLEAR_MOVES\"\r\n\r\nexport type GameMoveDispatchTypes = addMove | clearMoves","import React, { useState, useEffect, useCallback } from 'react'\r\nimport './Board.css'\r\nimport { Piece, IPosition, Color, HandleMoves, CheckForPromotion, CheckForRightCastle, CheckForLeftCastle } from '../piece/piece'\r\nimport { Simulate, Move, boardsChecked } from '../simulation/simulation'\r\nimport { useDispatch } from 'react-redux'\r\nimport { GameMoves } from '../../Reducers/GameMoves/GameMovesAction'\r\n\r\nconst Board = () => {\r\n    const GetRow = (idx:number):number => Math.floor( idx / 8 )\r\n    const GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\n    const isLight = (idx:number) => ( GetRow(idx) % 2 ) === (GetCol(idx) % 2)\r\n    const isLightPiece = (idx:number) => board[idx].color === Color.Light \r\n    const isKing = (idx:number) =>  board[idx].piece === Piece.King\r\n    const isQueen = (idx:number) =>  board[idx].piece === Piece.Queen\r\n    const isBishop = (idx:number) =>  board[idx].piece === Piece.Bishop\r\n    const isKnight = (idx:number) =>  board[idx].piece === Piece.Knight\r\n    const isRook = (idx:number) =>  board[idx].piece === Piece.Rook\r\n    const isPawn = (idx:number) =>  board[idx].piece === Piece.Pawn\r\n    const SwapTurns = () => setTurn((turn === Color.Light) ? Color.Dark : Color.Light)\r\n    const isSelected = (idx:number) => selected === idx\r\n    const isAvailableMove = (idx:number) => availableMoves.includes(idx)\r\n    const isKillingMove = (idx:number) => killingMoves.includes(idx)\r\n    const InitializeBoard = ():IPosition[] => {\r\n        let newBoard:IPosition[] = new Array(64).fill({piece: Piece.Empty, color: Color.None, firstMove: true, index: -1})\r\n        newBoard.forEach( (_,i) => newBoard[i] = {piece: Piece.Empty, color: Color.None, firstMove: true, index: i})\r\n        newBoard[0] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 0}\r\n        newBoard[1] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 1}\r\n        newBoard[2] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 2}\r\n        newBoard[3] = {piece: Piece.Queen, color: Color.Dark, firstMove: true, index: 3}\r\n        newBoard[4] = {piece: Piece.King, color: Color.Dark, firstMove: true, index: 4}\r\n        newBoard[5] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 5}\r\n        newBoard[6] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 6}\r\n        newBoard[7] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 7}\r\n        for(let i=8; i<16; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Dark, firstMove: true, index: i}\r\n\r\n        newBoard[56] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 56}\r\n        newBoard[57] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 57}\r\n        newBoard[58] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 58}\r\n        newBoard[59] = {piece: Piece.Queen, color: Color.Light, firstMove: true, index: 59}\r\n        newBoard[60] = {piece: Piece.King, color: Color.Light, firstMove: true, index: 60}\r\n        newBoard[61] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 61}\r\n        newBoard[62] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 62}\r\n        newBoard[63] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 63}\r\n        for(let i=48; i<56; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Light, firstMove: true, index: i}\r\n        return newBoard\r\n    }\r\n    const HandlePieceClick = (idx:number) => {    \r\n        if(availableMoves.includes(idx)){\r\n            const newBoard = [...board]\r\n            newBoard[idx] ={\r\n                ...board[selected],\r\n                index:idx,\r\n                firstMove: false\r\n            } \r\n            if(CheckForPromotion(idx,newBoard)){\r\n                newBoard[idx] = {\r\n                    piece: Piece.Queen,\r\n                    color: board[selected].color,\r\n                    index: idx,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            else if(CheckForRightCastle(selected,board) && idx === selected + 2){\r\n                newBoard[idx-1] = {\r\n                    ...newBoard[idx+1],\r\n                    index: idx-1,\r\n                    firstMove: false\r\n                }\r\n                newBoard[idx+1] = {\r\n                    piece: Piece.Empty,\r\n                    color: Color.None,\r\n                    index: idx+1,\r\n                    firstMove: false\r\n                }\r\n            }\r\n            else if(CheckForLeftCastle(selected,board) && idx === selected - 2){\r\n                newBoard[idx+1] = {\r\n                    ...newBoard[idx-2],\r\n                    index: idx+1,\r\n                    firstMove: false\r\n                }\r\n                newBoard[idx-2] = {\r\n                    piece: Piece.Empty,\r\n                    color: Color.None,\r\n                    index: idx-2,\r\n                    firstMove: false\r\n                }\r\n            }\r\n            newBoard[selected] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: selected,\r\n                firstMove: false\r\n            }\r\n            CreateMoveNotation(selected,idx)\r\n            SetSelected(-1)\r\n            setBoard(newBoard)\r\n            setAvailableMoves([])\r\n            setKillingMoves([])\r\n            SwapTurns()\r\n        }\r\n        else{\r\n            SetSelected(idx)\r\n            if(board[idx].color === turn) setAvailableMoves(HandleMoves(board[idx],board))\r\n            else setAvailableMoves([])\r\n        }\r\n    }\r\n    const CheckForWin = () => {\r\n        var lightKing = false\r\n        var darkKing = false\r\n        board.forEach(s => {\r\n            if(s.piece === Piece.King) (s.color === Color.Light) ? lightKing = true : darkKing = true\r\n        })\r\n        if(!lightKing && !gameOver) {\r\n            alert(\"Dark has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }\r\n        else if(!darkKing && !gameOver){\r\n            alert(\"Light has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }  \r\n    }\r\n    const MakeAiMove = (move:Move) => {\r\n        const newBoard = [...board]\r\n        newBoard[move.end] = {\r\n            ...newBoard[move.start],\r\n            firstMove: false,\r\n            index: move.end\r\n        }\r\n        if(CheckForPromotion(move.end,newBoard)){\r\n            newBoard[move.end] = {\r\n                piece: Piece.Queen,\r\n                color: newBoard[move.end].color,\r\n                index: move.end,\r\n                firstMove:false,  \r\n            }\r\n        }\r\n        else if(CheckForRightCastle(move.start,board) && move.end === move.start + 2){\r\n            newBoard[move.end-1] = {\r\n                ...newBoard[move.end+1],\r\n                index: move.end-1,\r\n                firstMove: false\r\n            }\r\n            newBoard[move.end+1] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: move.end+1,\r\n                firstMove: false\r\n            }\r\n        }\r\n        else if(CheckForLeftCastle(move.start,board) && move.end === move.start - 2){\r\n            newBoard[move.end+1] = {\r\n                ...newBoard[move.end-2],\r\n                index: move.end+1,\r\n                firstMove: false\r\n            }\r\n            newBoard[move.end-2] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: move.end-2,\r\n                firstMove: false\r\n            }\r\n        }\r\n        newBoard[move.start] = {\r\n            piece: Piece.Empty,\r\n            color: Color.None,\r\n            firstMove: false,\r\n            index: move.start\r\n        }\r\n        setAiMoveStart(move.start)\r\n        setAiMoveFinish(move.end)\r\n        CreateMoveNotation(move.start,move.end)\r\n        setBoard(newBoard)\r\n        SwapTurns()\r\n    }\r\n    const dispatch = useDispatch()\r\n    const CreateMoveNotation = (start:number, end:number) => {\r\n        const movedPiece = PieceToChar(board[start].piece)\r\n        const endPos = IdxToAlphaNumeric(end)\r\n        var takenPiece = \"\"\r\n        if(board[end].piece !== Piece.Empty) takenPiece = \"x\"\r\n\r\n        const newBoard = [...board]\r\n        newBoard[end] = {\r\n            ...newBoard[start],\r\n            firstMove: false,\r\n            index: end\r\n        }\r\n\r\n        if(CheckForRightCastle(start,board) && end === start + 2 || \r\n            CheckForLeftCastle(start,board) && end === start - 2){\r\n                dispatch(GameMoves(\"O-O\",\"ADD_MOVE\"))\r\n        }\r\n        else if(CheckForPromotion(end,newBoard)){\r\n            dispatch(GameMoves(movedPiece+\"=Q\",\"ADD_MOVE\"))\r\n        }\r\n        else{\r\n            dispatch(GameMoves(movedPiece+takenPiece+endPos,\"ADD_MOVE\"))\r\n        }  \r\n    }\r\n    const PieceToChar = (piece:Piece):string => {\r\n        if(piece === Piece.King) return \"K\"\r\n        else if(piece === Piece.Queen) return \"Q\"\r\n        else if(piece === Piece.Bishop) return \"B\"\r\n        else if(piece === Piece.Knight) return \"N\"\r\n        else if(piece === Piece.Rook) return \"R\"\r\n        else if(piece === Piece.Pawn) return \"\"\r\n        else return \"\"\r\n    }\r\n    const IdxToAlphaNumeric = (idx:number):string => String.fromCharCode(97 + GetCol(idx)) + (8 - GetRow(idx))\r\n\r\n    const ShowPopUp = () => 5\r\n\r\n    const[board,setBoard] = useState( () => InitializeBoard())\r\n    const[turn,setTurn] = useState(Color.Light)\r\n    const[selected,SetSelected] = useState(-1)\r\n    const[availableMoves, setAvailableMoves] = useState([-1])\r\n    const[killingMoves,setKillingMoves] = useState([-1])\r\n    const[gameOver,setGameOver] = useState(false)\r\n    const[aiMoveStart,setAiMoveStart] = useState(-1)\r\n    const[aiMoveFinish,setAiMoveFinish] = useState(-1)\r\n\r\n    useEffect( () => {\r\n        const kMoves:number[] =[]\r\n        board.forEach( s => {\r\n            if(s.piece !== Piece.Empty && s.color !== turn){\r\n                if(availableMoves.includes(s.index)) kMoves.push(s.index)\r\n            }\r\n        })\r\n        setKillingMoves(kMoves)\r\n    }, [availableMoves])\r\n    useEffect(() => {\r\n        const GetMove = async () => {\r\n            if(turn === Color.Dark){\r\n                const move = await Simulate(board,3,Color.Dark)\r\n                MakeAiMove(move)\r\n            }\r\n        }\r\n        GetMove()\r\n    },[turn])\r\n    useEffect(() => CheckForWin())\r\n    useEffect(() => {\r\n        setBoard(InitializeBoard())\r\n        setAiMoveStart(-1)\r\n        setAiMoveFinish(-1)\r\n        dispatch(GameMoves(\" \",\"CLEAR_MOVES\"))\r\n        setGameOver(false)\r\n    },[gameOver])\r\n\r\n    return(\r\n        <div className='Board__container'>\r\n            <div className='Board__gameboard'>\r\n                {board.map( (_,idx) => {\r\n                    return( \r\n                    <div className={[\r\n                        'Board__space',\r\n                        `${isLight(idx) ? 'Board__spaceLight' : 'Board__spaceDark'}`,\r\n                        `${isKing(idx) ? isLightPiece(idx) ? 'Board__king-light' : 'Board__king-dark' : '' }`,\r\n                        `${isQueen(idx) ? isLightPiece(idx) ? 'Board__queen-light' : 'Board__queen-dark' : '' }`,\r\n                        `${isBishop(idx) ? isLightPiece(idx) ? 'Board__bishop-light' : 'Board__bishop-dark' : '' }`,\r\n                        `${isKnight(idx) ? isLightPiece(idx) ? 'Board__knight-light' : 'Board__knight-dark' : '' }`,\r\n                        `${isRook(idx) ? isLightPiece(idx) ? 'Board__rook-light' : 'Board__rook-dark' : '' }`,\r\n                        `${isPawn(idx) ? isLightPiece(idx) ? 'Board__pawn-light' : 'Board__pawn-dark' : '' }`,\r\n                        `${isSelected(idx) && 'Board__Selected'}`,\r\n                        `${isAvailableMove(idx) && 'Board__AvailableMove'}`,\r\n                        `${isKillingMove(idx) && 'Board__KillingMove'}`,\r\n                        `${idx === aiMoveStart && 'Board__AiMoveStart'}`,\r\n                        `${idx === aiMoveFinish && 'Board__AiMoveFinish'}`\r\n                    ].join(\" \")}\r\n                    onClick={() => HandlePieceClick(idx)}\r\n                    key={idx}>{IdxToAlphaNumeric(idx)}</div>)\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <div className='Header__container'>\r\n            <div className='Header__title-container'>\r\n                <h1>Chess AI with Min Max Algorithm</h1>\r\n            </div>\r\n            <div className='Header__legend-container'>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__selected-index'/>\r\n                    <p>Selected Index</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__available-move'/>\r\n                    <p>Available Move</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__killing-move'/>\r\n                    <p>Taking Move</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__ai-start-pos'/>\r\n                    <p>AI Turn Start Position</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__ai-finish-pos'/>\r\n                    <p>AI Turn End Position</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './SideBar.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootStore } from '../../store'\r\nimport { MovesState } from '../../Reducers/GameMoves/GameMovesReducer'\r\nimport { boardsChecked } from '../simulation/simulation'\r\n\r\ninterface Turn{\r\n    number: number,\r\n    lightMove: string,\r\n    darkMove: string\r\n}\r\n\r\nconst SideBar = () => {\r\n\r\n    const FormatMoves = (state:MovesState):Turn[] => {\r\n        const formatted:Turn[] = []\r\n        formatted.push({\r\n            number: 0,\r\n            lightMove: 'Light',\r\n            darkMove: 'Dark'\r\n        })\r\n        var count = 1\r\n        for(let i = 0; i < state.moves.length; i+=2){\r\n            formatted.push({\r\n                number: count,\r\n                lightMove: state.moves[i],\r\n                darkMove: state.moves[i+1]\r\n            })\r\n            count++\r\n        }\r\n        return formatted\r\n    }\r\n\r\n    const turns = FormatMoves(useSelector((state: RootStore) => state.moves))\r\n\r\n    return(\r\n        <div className='SideBar__container'>\r\n            <div className='SideBar__boards-checked'>Evaluated Boards: {boardsChecked}</div>\r\n            <div className='SideBar__moves'>\r\n                {turns.map( (_,idx) => {\r\n                    return(\r\n                        <div className={['SideBar__move',\r\n                            ((idx % 2 === 1) ? \"\" : 'SideBar__move-light-background')].join(\" \")}>\r\n                            <div className='SideBar__move-item'>{turns[idx].number + \").\"}</div>\r\n                            <div className='SideBar__move-item'>{turns[idx].lightMove}</div>\r\n                            <div className='SideBar__move-item'>{((turns[idx].darkMove === undefined) ? \"\" : turns[idx].darkMove)}</div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar","import React from 'react'\r\nimport './App.css'\r\nimport Board from './components/Board/Board'\r\nimport Header from './components/Header/Header';\r\nimport SideBar from './components/SideBar/SideBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header/>\r\n      <div className=\"main\">\r\n        <Board/>\r\n        <SideBar/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { GameMoveDispatchTypes, clearMoves, addMove} from './GameMovesAction'\r\n\r\nexport interface MovesState{\r\n    moves: string[]\r\n}\r\n\r\nconst initState = {\r\n    moves: []\r\n}\r\n\r\nexport const GameMovesReducer = (state:MovesState = initState, action: GameMoveDispatchTypes):MovesState => {\r\n    switch(action.type){\r\n        case 'ADD_MOVE':\r\n            return {...state, moves: [...state.moves, action.payload]}\r\n        case \"CLEAR_MOVES\":\r\n            return {moves: []}\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers, createStore } from \"redux\";\r\nimport { GameMovesReducer } from \"./Reducers/GameMoves/GameMovesReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    moves: GameMovesReducer\r\n})\r\n\r\nexport type RootStore = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './store'\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}