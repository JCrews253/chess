{"version":3,"sources":["components/piece/piece.ts","components/simulation/simulation.ts","components/Board/Board.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["Piece","Color","GetRow","idx","Math","floor","GetCol","GetIdxByRowCol","row","col","HandleMoves","piece","board","moves","Knight","KnightMoves","index","Rook","RookMoves","Bishop","BishopMoves","Queen","concat","King","KingMoves","Pawn","PawnMoves","push","filter","m","color","cRow","Empty","cCol","Light","firstMove","Dark","boardsChecked","reverseArray","array","slice","reverse","LPawnPosPoints","DPawnPosPoints","KnightPosPoints","LBishopPosPoints","DBishopPosPoints","LRookPosPoints","DRookPosPoints","QueenPosPoints","LKingPosPoints","DKingPosPoints","Simulate","depth","a","cloneBoard","JSON","parse","stringify","bestScore","Infinity","bestMove","start","end","s","forEach","p","None","score","MinMax","console","log","isMaximizing","alpha","beta","CalcScore","lightPieces","darkPieces","GetPoints","Board","isLight","isLightPiece","isKing","isQueen","isBishop","isKnight","isRook","isPawn","SwapTurns","setTurn","turn","isSelected","selected","isAvailableMove","availableMoves","includes","isKillingMove","killingMoves","InitializeBoard","newBoard","Array","fill","_","i","MakeAiMove","move","setBoard","ShowPopUp","position","useState","SetSelected","setAvailableMoves","setKillingMoves","gameOver","setGameOver","useEffect","kMoves","GetMove","lightKing","darkKing","alert","CheckForWin","className","map","join","onClick","HandlePieceClick","key","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a8fc786.chunk.js","sourcesContent":["export interface IPosition{\r\n    piece: Piece,\r\n    color: Color,\r\n    index: number,\r\n    firstMove: boolean\r\n}\r\n\r\nexport enum Piece{\r\n    King,\r\n    Queen,\r\n    Bishop,\r\n    Knight,\r\n    Rook,\r\n    Pawn,\r\n    Empty\r\n}\r\n\r\nexport enum Color{\r\n    Dark,\r\n    Light,\r\n    None\r\n}\r\n\r\nconst GetRow = (idx:number):number => Math.floor( idx / 8 )\r\nconst GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\nconst GetIdxByRowCol = (row:number,col:number):number => 8 * row + col\r\n\r\nexport const HandleMoves = (piece:IPosition,board:IPosition[]):number[] => {\r\n    var moves:number[] = []\r\n    if(piece.piece === Piece.Knight) moves = KnightMoves(piece.index,board) \r\n    if(piece.piece === Piece.Rook) moves = RookMoves(piece.index,board) \r\n    if(piece.piece === Piece.Bishop) moves = BishopMoves(piece.index,board) \r\n    if(piece.piece === Piece.Queen) moves = moves.concat(BishopMoves(piece.index,board)).concat(RookMoves(piece.index,board)) \r\n    if(piece.piece === Piece.King) moves = KingMoves(piece.index,board)\r\n    if(piece.piece === Piece.Pawn) moves = PawnMoves(piece.index,board)\r\n    return moves\r\n}\r\n\r\nexport const KnightMoves = (idx: number,board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row >= 2 && col <= 6) moves.push(GetIdxByRowCol(row-2,col+1))\r\n    if(row >= 1 && col <= 5) moves.push(GetIdxByRowCol(row-1,col+2))\r\n    if(row <= 6 && col <= 5) moves.push(GetIdxByRowCol(row+1,col+2))\r\n    if(row <= 5 && col <= 6) moves.push(GetIdxByRowCol(row+2,col+1))\r\n    if(row <= 5 && col >= 1) moves.push(GetIdxByRowCol(row+2,col-1))\r\n    if(row <= 6 && col >= 2) moves.push(GetIdxByRowCol(row+1,col-2))\r\n    if(row >= 1 && col >= 2) moves.push(GetIdxByRowCol(row-1,col-2))\r\n    if(row >= 2 && col >= 1) moves.push(GetIdxByRowCol(row-2,col-1))\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const RookMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)\r\n    const moves:number[] =[]\r\n    //up\r\n    var cRow = row\r\n    while((cRow - 1 > -1 ) && board[GetIdxByRowCol(cRow-1,col)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,col))\r\n        cRow--\r\n    }\r\n    if(cRow > 0 && board[GetIdxByRowCol(cRow-1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,col))\r\n\r\n    //Right\r\n    var cCol = col\r\n    while((cCol + 1 < 8 && board[GetIdxByRowCol(row,cCol+1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol+1))\r\n        cCol++\r\n    }\r\n    if(cCol < 7 && board[GetIdxByRowCol(row,cCol + 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol+1))\r\n\r\n    //Down\r\n    cRow = row\r\n    while((cRow + 1 < 8 && board[GetIdxByRowCol(cRow+1,col)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(cRow+1,col))\r\n        cRow++\r\n    }\r\n    if(cRow < 7 && board[GetIdxByRowCol(cRow+1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,col))\r\n\r\n    //Left\r\n    cCol = col\r\n    while((cCol - 1 > 0 && board[GetIdxByRowCol(row,cCol-1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol-1))\r\n        cCol--\r\n    }\r\n    if(cCol > 0 && board[GetIdxByRowCol(row,cCol - 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol-1))\r\n\r\n    return moves\r\n}\r\n\r\nexport const BishopMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    //Up Right\r\n    var cRow = row\r\n    var cCol = col\r\n    while(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n        cRow--\r\n        cCol++\r\n    }\r\n    if(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n    \r\n    //Down Right\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n        cRow++\r\n        cCol++\r\n    }\r\n    if(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n\r\n    //Down Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n        cRow++\r\n        cCol--\r\n    }\r\n    if(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n\r\n    //Up Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n        cRow--\r\n        cCol--\r\n    }\r\n    if(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n\r\n\r\n    return moves\r\n}\r\n\r\nexport const KingMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row > 0) moves.push(GetIdxByRowCol(row-1,col)) //up\r\n    if(row > 0 && col < 7) moves.push(GetIdxByRowCol(row-1,col+1)) //up right\r\n    if(col < 7) moves.push(GetIdxByRowCol(row,col+1)) //right\r\n    if(row < 7 && col < 7) moves.push(GetIdxByRowCol(row+1,col+1)) //down right\r\n    if(row < 7) moves.push(GetIdxByRowCol(row+1,col)) //down\r\n    if(row < 7 && col > 0) moves.push(GetIdxByRowCol(row+1,col-1)) //down left\r\n    if(col > 0) moves.push(GetIdxByRowCol(row,col-1)) //left\r\n    if(row > 0 && col > 0) moves.push(GetIdxByRowCol(row-1,col-1)) //up left\r\n\r\n    //castling\r\n\r\n    //Remove check moves\r\n\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const PawnMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n\r\n    if(board[idx].color === Color.Light){\r\n        if(row > 0 && board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row-1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row-2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row-2,col))\r\n            }\r\n        if( col > 0 &&\r\n            board[GetIdxByRowCol(row-1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col-1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col-1))\r\n            }\r\n        if( col < 7 &&\r\n            board[GetIdxByRowCol(row-1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col+1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col+1))\r\n            } \r\n    }\r\n    else{\r\n        if(row < 7 && board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row+1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row+2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row+2,col))\r\n            } \r\n        if(col > 0 &&\r\n            board[GetIdxByRowCol(row+1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col-1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col-1))\r\n            }\r\n        if(col < 7 &&\r\n            board[GetIdxByRowCol(row+1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col+1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col+1))\r\n            } \r\n    }\r\n\r\n\r\n\r\n    //en passant\r\n\r\n    return moves\r\n}","import { IPosition, Color, Piece, HandleMoves} from \"../piece/piece\";\r\n\r\nexport interface Move{\r\n    start: number,\r\n    end: number\r\n}\r\n\r\nexport var boardsChecked:number = 0\r\n\r\nconst KingPoints = 900\r\nconst QueenPoints = 90\r\nconst BishopPoints = 30\r\nconst KnightPoints = 30\r\nconst RookPoints = 50\r\nconst PawnPoints = 10\r\n\r\nvar reverseArray = function(array:number[]) {\r\n    return array.slice().reverse();\r\n};\r\n\r\nconst LPawnPosPoints = [\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n        5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,\r\n        1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0,\r\n        0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5,\r\n        0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0,\r\n        0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5,\r\n        0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5,\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0\r\n    ];\r\n\r\nconst DPawnPosPoints = reverseArray(LPawnPosPoints);\r\n\r\nconst KnightPosPoints = [\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,\r\n        -4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0,\r\n        -3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0,\r\n        -3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0,\r\n        -3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0,\r\n        -3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0,\r\n        -4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0,\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0\r\n    ];\r\n\r\nconst LBishopPosPoints = [\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0,\r\n     -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0,\r\n     -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0,\r\n     -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0,\r\n     -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0,\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst DBishopPosPoints = reverseArray(LBishopPosPoints);\r\n\r\nconst LRookPosPoints = [\r\n      0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n      0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n      0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0\r\n];\r\n\r\nconst DRookPosPoints = reverseArray(LRookPosPoints);\r\n\r\nconst QueenPosPoints = [\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n      0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n     -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst LKingPosPoints = [\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0,\r\n     -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0,\r\n      2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ,\r\n      2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0\r\n];\r\n\r\nconst DKingPosPoints = reverseArray(LKingPosPoints);\r\n\r\n\r\nexport const Simulate = async (board:IPosition[], depth:number, color:Color):Promise<Move> => {\r\n    boardsChecked = 0\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    var bestScore = -Infinity\r\n    var bestMove:Move = {start:-1,end:-1}\r\n    var alpha:number = -Infinity\r\n    var beta:number = Infinity\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                firstMove:false,\r\n                index: m,\r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, false, alpha,beta)\r\n            if(score > bestScore){  \r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    console.log(boardsChecked)\r\n    return bestMove\r\n}\r\n\r\nexport const MinMax = (board:IPosition[], depth:number, color:Color, isMaximizing:boolean,alpha:number, beta:number):number => {\r\n    //Make a copy of the board\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    //if the depth reaches the end return the score of the current board\r\n    if(depth <= 0) return CalcScore(cloneBoard)\r\n    //set -inf if maximizing players turn \r\n    var bestScore = isMaximizing ? -Infinity : Infinity\r\n    var bestMove:Move = {start: -1, end: -1}\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                index: m,\r\n                firstMove:false,  \r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, isMaximizing ? false : true,alpha,beta)       \r\n            if(isMaximizing ? score > bestScore : score < bestScore){\r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    cloneBoard[bestMove.end] = {\r\n        piece: cloneBoard[bestMove.start].piece,\r\n        color: cloneBoard[bestMove.start].color,\r\n        index: bestMove.end,\r\n        firstMove:false,  \r\n    }\r\n    cloneBoard[bestMove.start] = {\r\n        piece: Piece.Empty,\r\n        color: Color.None,\r\n        index: bestMove.start,\r\n        firstMove:false\r\n    }\r\n    return CalcScore(cloneBoard)\r\n}\r\n\r\nconst CalcScore = (board:IPosition[]):number => {\r\n    const lightPieces =  board.filter( s => s.color === Color.Light)\r\n    const darkPieces =  board.filter( s => s.color === Color.Dark)\r\n\r\n    var score = 0\r\n    darkPieces.forEach( p => score+= GetPoints(p))\r\n    lightPieces.forEach( p => score-=GetPoints(p))\r\n    return score\r\n}\r\n\r\nconst GetPoints = (piece:IPosition):number => {\r\n    if(piece.piece === Piece.King ) return KingPoints + ((piece.color === Color.Light) ? LKingPosPoints[piece.index] : DKingPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Queen ) return QueenPoints + QueenPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Bishop ) return BishopPoints + ((piece.color === Color.Light) ? LBishopPosPoints[piece.index] : DBishopPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Knight ) return KnightPoints + KnightPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Rook ) return RookPoints + ((piece.color === Color.Light) ? LRookPosPoints[piece.index] : DRookPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Pawn ) return PawnPoints + ((piece.color === Color.Light) ? LPawnPosPoints[piece.index] : DPawnPosPoints[piece.index])\r\n    else return 0\r\n} ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport './Board.css'\r\nimport { Piece, IPosition, Color, HandleMoves } from '../piece/piece'\r\nimport { Simulate, Move, boardsChecked } from '../simulation/simulation'\r\nimport Popup from 'reactjs-popup'\r\n\r\nconst Board = () => {\r\n    const GetRow = (idx:number):number => Math.floor( idx / 8 )\r\n    const GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\n    const isLight = (idx:number) => ( GetRow(idx) % 2 ) === (GetCol(idx) % 2)\r\n    const isLightPiece = (idx:number) => board[idx].color === Color.Light \r\n    const isKing = (idx:number) =>  board[idx].piece === Piece.King\r\n    const isQueen = (idx:number) =>  board[idx].piece === Piece.Queen\r\n    const isBishop = (idx:number) =>  board[idx].piece === Piece.Bishop\r\n    const isKnight = (idx:number) =>  board[idx].piece === Piece.Knight\r\n    const isRook = (idx:number) =>  board[idx].piece === Piece.Rook\r\n    const isPawn = (idx:number) =>  board[idx].piece === Piece.Pawn\r\n    const SwapTurns = () => setTurn((turn === Color.Light) ? Color.Dark : Color.Light)\r\n    const isSelected = (idx:number) => selected === idx\r\n    const isAvailableMove = (idx:number) => availableMoves.includes(idx)\r\n    const isKillingMove = (idx:number) => killingMoves.includes(idx)\r\n    const InitializeBoard = ():IPosition[] => {\r\n        let newBoard:IPosition[] = new Array(64).fill({piece: Piece.Empty, color: Color.None, firstMove: true, index: -1})\r\n        newBoard.forEach( (_,i) => newBoard[i] = {piece: Piece.Empty, color: Color.None, firstMove: true, index: i})\r\n        newBoard[0] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 0}\r\n        newBoard[1] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 1}\r\n        newBoard[2] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 2}\r\n        newBoard[3] = {piece: Piece.Queen, color: Color.Dark, firstMove: true, index: 3}\r\n        newBoard[4] = {piece: Piece.King, color: Color.Dark, firstMove: true, index: 4}\r\n        newBoard[5] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 5}\r\n        newBoard[6] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 6}\r\n        newBoard[7] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 7}\r\n        for(let i=8; i<16; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Dark, firstMove: true, index: i}\r\n\r\n\r\n        newBoard[56] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 56}\r\n        newBoard[57] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 57}\r\n        newBoard[58] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 58}\r\n        newBoard[59] = {piece: Piece.Queen, color: Color.Light, firstMove: true, index: 59}\r\n        newBoard[60] = {piece: Piece.King, color: Color.Light, firstMove: true, index: 60}\r\n        newBoard[61] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 61}\r\n        newBoard[62] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 62}\r\n        newBoard[63] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 63}\r\n        for(let i=48; i<56; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Light, firstMove: true, index: i}\r\n        return newBoard\r\n    }\r\n    const HandlePieceClick = (idx:number) => {    \r\n        if(availableMoves.includes(idx)){\r\n            const newBoard = [...board]\r\n            newBoard[idx] ={\r\n                ...board[selected],\r\n                index:idx,\r\n                firstMove: false\r\n            } \r\n            newBoard[selected] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: selected,\r\n                firstMove: false\r\n            }\r\n            SetSelected(idx)\r\n            setBoard(newBoard)\r\n            setAvailableMoves([])\r\n            setKillingMoves([])\r\n            SwapTurns()\r\n        }\r\n        else{\r\n            SetSelected(idx)\r\n            if(board[idx].color === turn) setAvailableMoves(HandleMoves(board[idx],board))\r\n            else setAvailableMoves([])\r\n        }\r\n    }\r\n    const CheckForWin = () => {\r\n        var lightKing = false\r\n        var darkKing = false\r\n        board.forEach(s => {\r\n            if(s.piece === Piece.King) (s.color === Color.Light) ? lightKing = true : darkKing = true\r\n        })\r\n        if(lightKing === false) {\r\n            alert(\"Dark has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }\r\n        else if(darkKing === false){\r\n            alert(\"Light has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }  \r\n    }\r\n    const MakeAiMove = (move:Move) => {\r\n        const newBoard = [...board]\r\n        newBoard[move.end] = {\r\n            ...newBoard[move.start],\r\n            firstMove: false,\r\n            index: move.end\r\n        }\r\n        newBoard[move.start] = {\r\n            piece: Piece.Empty,\r\n            color: Color.None,\r\n            firstMove: false,\r\n            index: move.start\r\n        }\r\n        setBoard(newBoard)\r\n        SwapTurns()\r\n    }\r\n    const ShowPopUp = () => (\r\n        <Popup position='center center'>\r\n            <div>\r\n                <h1>This is my popup</h1>\r\n            </div>\r\n        </Popup>\r\n    )\r\n\r\n    const[board,setBoard] = useState( () => InitializeBoard())\r\n    const[turn,setTurn] = useState(Color.Light)\r\n    const[selected,SetSelected] = useState(-1)\r\n    const[availableMoves, setAvailableMoves] = useState([-1])\r\n    const[killingMoves,setKillingMoves] = useState([-1])\r\n    const[gameOver,setGameOver] = useState(false)\r\n\r\n    useEffect( () => {\r\n        const kMoves:number[] =[]\r\n        board.forEach( s => {\r\n            if(s.piece !== Piece.Empty && s.color !== turn){\r\n                if(availableMoves.includes(s.index)) kMoves.push(s.index)\r\n            }\r\n        })\r\n        setKillingMoves(kMoves)\r\n    }, [availableMoves])\r\n    useEffect(() => {\r\n        const GetMove = async () => {\r\n            if(turn === Color.Dark){\r\n                const move = await Simulate(board,3,Color.Dark)\r\n                MakeAiMove(move)\r\n            }\r\n        }\r\n        GetMove()\r\n    },[turn])\r\n\r\n    useEffect(() => CheckForWin())\r\n    useEffect(() => {\r\n        setBoard(InitializeBoard())\r\n        setGameOver(false)\r\n    },[gameOver])\r\n\r\n    return(\r\n        <div className='Board__container'>\r\n            <div className='Board__gameboard'>\r\n                {board.map( (_,idx) => {\r\n                    return( \r\n                    <div className={[\r\n                        'Board__space',\r\n                        `${isLight(idx) ? 'Board__spaceLight' : 'Board__spaceDark'}`,\r\n                        `${isKing(idx) ? isLightPiece(idx) ? 'Board__king-light' : 'Board__king-dark' : '' }`,\r\n                        `${isQueen(idx) ? isLightPiece(idx) ? 'Board__queen-light' : 'Board__queen-dark' : '' }`,\r\n                        `${isBishop(idx) ? isLightPiece(idx) ? 'Board__bishop-light' : 'Board__bishop-dark' : '' }`,\r\n                        `${isKnight(idx) ? isLightPiece(idx) ? 'Board__knight-light' : 'Board__knight-dark' : '' }`,\r\n                        `${isRook(idx) ? isLightPiece(idx) ? 'Board__rook-light' : 'Board__rook-dark' : '' }`,\r\n                        `${isPawn(idx) ? isLightPiece(idx) ? 'Board__pawn-light' : 'Board__pawn-dark' : '' }`,`\r\n                        ${isSelected(idx) && 'Board__Selected'}`,\r\n                        `${isAvailableMove(idx) && 'Board__AvailableMove'}`,\r\n                        `${isKillingMove(idx) && 'Board__KillingMove'}`\r\n                    ].join(\" \")}\r\n                    onClick={() => HandlePieceClick(idx)}\r\n                    key={idx}>{idx}</div>)\r\n                })}\r\n            </div>\r\n            <h1>Number of boards evaluated: {boardsChecked}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <div className='Header__container'>\r\n            <h1>Chess AI with Min Max Algorithm</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './App.css'\r\nimport Board from './components/Board/Board'\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header/>\r\n      <Board/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}