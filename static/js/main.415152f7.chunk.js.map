{"version":3,"sources":["components/piece/piece.ts","components/simulation/simulation.ts","components/Board/Board.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["Piece","Color","GetRow","idx","Math","floor","GetCol","GetIdxByRowCol","row","col","HandleMoves","piece","board","moves","Knight","KnightMoves","index","Rook","RookMoves","Bishop","BishopMoves","Queen","concat","King","KingMoves","Pawn","PawnMoves","push","filter","m","color","cRow","Empty","cCol","CheckForRightCastle","CheckForLeftCastle","Light","firstMove","Dark","CheckForPromotion","rp","lp","boardsChecked","reverseArray","array","slice","reverse","LPawnPosPoints","DPawnPosPoints","KnightPosPoints","LBishopPosPoints","DBishopPosPoints","LRookPosPoints","DRookPosPoints","QueenPosPoints","LKingPosPoints","DKingPosPoints","Simulate","depth","a","cloneBoard","JSON","parse","stringify","bestScore","Infinity","bestMove","start","end","s","forEach","p","None","score","MinMax","isMaximizing","alpha","beta","CalcScore","lightPieces","darkPieces","GetPoints","Board","isLight","isLightPiece","isKing","isQueen","isBishop","isKnight","isRook","isPawn","SwapTurns","setTurn","turn","isSelected","selected","isAvailableMove","availableMoves","includes","isKillingMove","killingMoves","InitializeBoard","newBoard","Array","fill","_","i","MakeAiMove","move","setAiMoveStart","setAiMoveFinish","setBoard","ShowPopUp","useState","SetSelected","setAvailableMoves","setKillingMoves","gameOver","setGameOver","aiMoveStart","aiMoveFinish","useEffect","kMoves","GetMove","lightKing","darkKing","alert","CheckForWin","className","map","join","onClick","HandlePieceClick","key","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.415152f7.chunk.js","sourcesContent":["export interface IPosition{\r\n    piece: Piece,\r\n    color: Color,\r\n    index: number,\r\n    firstMove: boolean\r\n}\r\n\r\nexport enum Piece{\r\n    King,\r\n    Queen,\r\n    Bishop,\r\n    Knight,\r\n    Rook,\r\n    Pawn,\r\n    Empty\r\n}\r\n\r\nexport enum Color{\r\n    Dark,\r\n    Light,\r\n    None\r\n}\r\n\r\nconst GetRow = (idx:number):number => Math.floor( idx / 8 )\r\nconst GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\nconst GetIdxByRowCol = (row:number,col:number):number => 8 * row + col\r\n\r\nexport const HandleMoves = (piece:IPosition,board:IPosition[]):number[] => {\r\n    var moves:number[] = []\r\n    if(piece.piece === Piece.Knight) moves = KnightMoves(piece.index,board) \r\n    if(piece.piece === Piece.Rook) moves = RookMoves(piece.index,board) \r\n    if(piece.piece === Piece.Bishop) moves = BishopMoves(piece.index,board) \r\n    if(piece.piece === Piece.Queen) moves = moves.concat(BishopMoves(piece.index,board)).concat(RookMoves(piece.index,board)) \r\n    if(piece.piece === Piece.King) moves = KingMoves(piece.index,board)\r\n    if(piece.piece === Piece.Pawn) moves = PawnMoves(piece.index,board)\r\n    return moves\r\n}\r\n\r\nexport const KnightMoves = (idx: number,board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row >= 2 && col <= 6) moves.push(GetIdxByRowCol(row-2,col+1))\r\n    if(row >= 1 && col <= 5) moves.push(GetIdxByRowCol(row-1,col+2))\r\n    if(row <= 6 && col <= 5) moves.push(GetIdxByRowCol(row+1,col+2))\r\n    if(row <= 5 && col <= 6) moves.push(GetIdxByRowCol(row+2,col+1))\r\n    if(row <= 5 && col >= 1) moves.push(GetIdxByRowCol(row+2,col-1))\r\n    if(row <= 6 && col >= 2) moves.push(GetIdxByRowCol(row+1,col-2))\r\n    if(row >= 1 && col >= 2) moves.push(GetIdxByRowCol(row-1,col-2))\r\n    if(row >= 2 && col >= 1) moves.push(GetIdxByRowCol(row-2,col-1))\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const RookMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)\r\n    const moves:number[] =[]\r\n    //up\r\n    var cRow = row\r\n    while((cRow - 1 > -1 ) && board[GetIdxByRowCol(cRow-1,col)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,col))\r\n        cRow--\r\n    }\r\n    if(cRow > 0 && board[GetIdxByRowCol(cRow-1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,col))\r\n\r\n    //Right\r\n    var cCol = col\r\n    while((cCol + 1 < 8 && board[GetIdxByRowCol(row,cCol+1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol+1))\r\n        cCol++\r\n    }\r\n    if(cCol < 7 && board[GetIdxByRowCol(row,cCol + 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol+1))\r\n\r\n    //Down\r\n    cRow = row\r\n    while((cRow + 1 < 8 && board[GetIdxByRowCol(cRow+1,col)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(cRow+1,col))\r\n        cRow++\r\n    }\r\n    if(cRow < 7 && board[GetIdxByRowCol(cRow+1,col)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,col))\r\n\r\n    //Left\r\n    cCol = col\r\n    while((cCol - 1 > 0 && board[GetIdxByRowCol(row,cCol-1)].piece === Piece.Empty)){\r\n        moves.push(GetIdxByRowCol(row,cCol-1))\r\n        cCol--\r\n    }\r\n    if(cCol > 0 && board[GetIdxByRowCol(row,cCol - 1)].color !== board[idx].color) moves.push(GetIdxByRowCol(row,cCol-1))\r\n\r\n    return moves\r\n}\r\n\r\nexport const BishopMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    //Up Right\r\n    var cRow = row\r\n    var cCol = col\r\n    while(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n        cRow--\r\n        cCol++\r\n    }\r\n    if(cRow - 1 > -1 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow-1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol+1))\r\n    \r\n    //Down Right\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n        cRow++\r\n        cCol++\r\n    }\r\n    if(cRow + 1 < 8 && cCol + 1 < 8 && board[GetIdxByRowCol(cRow+1,cCol+1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol+1))\r\n\r\n    //Down Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n        cRow++\r\n        cCol--\r\n    }\r\n    if(cRow + 1 < 8 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow+1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow+1,cCol-1))\r\n\r\n    //Up Left\r\n    cRow = row\r\n    cCol = col\r\n    while(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].piece === Piece.Empty){\r\n        moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n        cRow--\r\n        cCol--\r\n    }\r\n    if(cRow - 1 > -1 && cCol - 1 > -1 && board[GetIdxByRowCol(cRow-1,cCol-1)].color !== board[idx].color) moves.push(GetIdxByRowCol(cRow-1,cCol-1))\r\n\r\n\r\n    return moves\r\n}\r\n\r\nexport const KingMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n    if(row > 0) moves.push(GetIdxByRowCol(row-1,col)) //up\r\n    if(row > 0 && col < 7) moves.push(GetIdxByRowCol(row-1,col+1)) //up right\r\n    if(col < 7) moves.push(GetIdxByRowCol(row,col+1)) //right\r\n    if(row < 7 && col < 7) moves.push(GetIdxByRowCol(row+1,col+1)) //down right\r\n    if(row < 7) moves.push(GetIdxByRowCol(row+1,col)) //down\r\n    if(row < 7 && col > 0) moves.push(GetIdxByRowCol(row+1,col-1)) //down left\r\n    if(col > 0) moves.push(GetIdxByRowCol(row,col-1)) //left\r\n    if(row > 0 && col > 0) moves.push(GetIdxByRowCol(row-1,col-1)) //up left\r\n\r\n    //castling\r\n    if(CheckForRightCastle(idx,board)){\r\n        moves.push(GetIdxByRowCol(row,col+2))\r\n    }\r\n    if(CheckForLeftCastle(idx,board)){\r\n        moves.push(GetIdxByRowCol(row,col-2))\r\n    }\r\n\r\n\r\n    //Remove check moves\r\n\r\n    return moves.filter(m => board[m].color !== board[idx].color)\r\n}\r\n\r\nexport const PawnMoves = (idx:number, board:IPosition[]):number[] => {\r\n    const row = GetRow(idx)\r\n    const col = GetCol(idx)      \r\n    const moves:number[] = []\r\n\r\n    if(board[idx].color === Color.Light){\r\n        if(row > 0 && board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row-1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row-1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row-2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row-2,col))\r\n            }\r\n        if( col > 0 && row > 0 &&\r\n            board[GetIdxByRowCol(row-1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col-1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col-1))\r\n            }\r\n        if( col < 7 && row > 0 &&\r\n            board[GetIdxByRowCol(row-1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row-1,col+1)].color !== Color.Light){\r\n                moves.push(GetIdxByRowCol(row-1,col+1))\r\n            } \r\n    }\r\n    else{\r\n        if(row < 7 && board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty) moves.push(GetIdxByRowCol(row+1,col))\r\n        if(board[idx].firstMove && \r\n            board[GetIdxByRowCol(row+1,col)].piece === Piece.Empty &&\r\n            board[GetIdxByRowCol(row+2,col)].piece === Piece.Empty){\r\n                moves.push(GetIdxByRowCol(row+2,col))\r\n            } \r\n        if(col > 0 && row < 7 &&\r\n            board[GetIdxByRowCol(row+1,col-1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col-1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col-1))\r\n            }\r\n        if(col < 7 && row < 7 &&\r\n            board[GetIdxByRowCol(row+1,col+1)].piece !== Piece.Empty &&\r\n            board[GetIdxByRowCol(row+1,col+1)].color !== Color.Dark){\r\n                moves.push(GetIdxByRowCol(row+1,col+1))\r\n            } \r\n    }\r\n\r\n\r\n\r\n    //en passant\r\n\r\n    return moves\r\n}\r\n\r\nexport const CheckForPromotion = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].piece === Piece.Pawn){\r\n        if(board[idx].color === Color.Light && idx < 8) return true\r\n        else if(board[idx].color === Color.Dark && idx > 55) return true\r\n        else return false\r\n    }\r\n    else return false\r\n}\r\n\r\nexport const CheckForRightCastle = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].firstMove && board[idx].piece === Piece.King){\r\n        var rp = 1\r\n        while(board[idx+rp].piece === Piece.Empty && rp+GetCol(idx) < 7){\r\n            rp++\r\n        }\r\n        if(board[idx+rp].piece === Piece.Rook && board[idx].color === board[idx+rp].color && board[idx+rp].firstMove){\r\n            return true\r\n        }\r\n        else return false\r\n    }\r\n    else return false\r\n}\r\n\r\nexport const CheckForLeftCastle = (idx:number, board:IPosition[]):boolean => {\r\n    if(board[idx].firstMove && board[idx].piece === Piece.King){\r\n        var lp = 1\r\n        while(board[idx-lp].piece === Piece.Empty && GetCol(idx)-lp > 0){\r\n            lp++\r\n        }\r\n        if(board[idx-lp].piece === Piece.Rook && board[idx].color === board[idx-lp].color && board[idx-lp].firstMove){\r\n            return true\r\n        }\r\n        else return false\r\n    }\r\n    else return false\r\n}","import { IPosition, Color, Piece, HandleMoves, CheckForPromotion} from \"../piece/piece\";\r\n\r\nexport interface Move{\r\n    start: number,\r\n    end: number\r\n}\r\n\r\nexport var boardsChecked:number = 0\r\n\r\nconst KingPoints = 900\r\nconst QueenPoints = 90\r\nconst BishopPoints = 30\r\nconst KnightPoints = 30\r\nconst RookPoints = 50\r\nconst PawnPoints = 10\r\n\r\nvar reverseArray = function(array:number[]) {\r\n    return array.slice().reverse();\r\n};\r\n\r\nconst LPawnPosPoints = [\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n        5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,\r\n        1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0,\r\n        0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5,\r\n        0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0,\r\n        0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5,\r\n        0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5,\r\n        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0\r\n    ];\r\n\r\nconst DPawnPosPoints = reverseArray(LPawnPosPoints);\r\n\r\nconst KnightPosPoints = [\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,\r\n        -4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0,\r\n        -3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0,\r\n        -3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0,\r\n        -3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0,\r\n        -3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0,\r\n        -4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0,\r\n        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0\r\n    ];\r\n\r\nconst LBishopPosPoints = [\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0,\r\n     -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0,\r\n     -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0,\r\n     -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0,\r\n     -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0,\r\n     -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst DBishopPosPoints = reverseArray(LBishopPosPoints);\r\n\r\nconst LRookPosPoints = [\r\n      0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,\r\n      0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n     -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,\r\n      0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0\r\n];\r\n\r\nconst DRookPosPoints = reverseArray(LRookPosPoints);\r\n\r\nconst QueenPosPoints = [\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,\r\n     -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n      0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,\r\n     -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,\r\n     -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0,\r\n     -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0\r\n];\r\n\r\nconst LKingPosPoints = [\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,\r\n     -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0,\r\n     -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0,\r\n      2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ,\r\n      2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0\r\n];\r\n\r\nconst DKingPosPoints = reverseArray(LKingPosPoints);\r\n\r\n\r\nexport const Simulate = async (board:IPosition[], depth:number, color:Color):Promise<Move> => {\r\n    boardsChecked = 0\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    var bestScore = -Infinity\r\n    var bestMove:Move = {start:-1,end:-1}\r\n    var alpha:number = -Infinity\r\n    var beta:number = Infinity\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                firstMove:false,\r\n                index: m,\r\n            }\r\n            if(CheckForPromotion(m,cloneBoard)){\r\n                cloneBoard[m] = {\r\n                    piece: Piece.Queen,\r\n                    color: cloneBoard[p.index].color,\r\n                    index: m,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, false, alpha,beta)\r\n            if(score > bestScore){  \r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    return bestMove\r\n}\r\n\r\nexport const MinMax = (board:IPosition[], depth:number, color:Color, isMaximizing:boolean,alpha:number, beta:number):number => {\r\n    //Make a copy of the board\r\n    var cloneBoard:IPosition[] = JSON.parse(JSON.stringify(board))\r\n    //if the depth reaches the end return the score of the current board\r\n    if(depth <= 0) return CalcScore(cloneBoard)\r\n    //set -inf if maximizing players turn \r\n    var bestScore = isMaximizing ? -Infinity : Infinity\r\n    var bestMove:Move = {start: -1, end: -1}\r\n    const pieces:IPosition[] = cloneBoard.filter( s => s.color === color)\r\n    pieces.forEach( p => {\r\n        const moves = HandleMoves(p,cloneBoard)\r\n        moves.forEach( m => {\r\n            boardsChecked++\r\n            cloneBoard[m] = {\r\n                piece: cloneBoard[p.index].piece,\r\n                color: cloneBoard[p.index].color,\r\n                index: m,\r\n                firstMove:false,  \r\n            }\r\n            if(CheckForPromotion(m,cloneBoard)){\r\n                cloneBoard[m] = {\r\n                    piece: Piece.Queen,\r\n                    color: cloneBoard[p.index].color,\r\n                    index: m,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            cloneBoard[p.index] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: p.index,\r\n                firstMove:false\r\n            }\r\n            var score = MinMax(cloneBoard,depth-1, color === Color.Light ? Color.Dark : Color.Light, isMaximizing ? false : true,alpha,beta)       \r\n            if(isMaximizing ? score > bestScore : score < bestScore){\r\n                bestScore = score\r\n                bestMove = {\r\n                    start: p.index,\r\n                    end: m\r\n                }\r\n            }\r\n            cloneBoard = JSON.parse(JSON.stringify(board))\r\n        })\r\n    })\r\n    if(bestMove.start !== -1 && bestMove.end !== -1){\r\n        cloneBoard[bestMove.end] = {\r\n            piece: cloneBoard[bestMove.start].piece,\r\n            color: cloneBoard[bestMove.start].color,\r\n            index: bestMove.end,\r\n            firstMove:false,  \r\n        }\r\n        if(CheckForPromotion(bestMove.end,cloneBoard)){\r\n            cloneBoard[bestMove.end] = {\r\n                piece: Piece.Queen,\r\n                color: cloneBoard[bestMove.end].color,\r\n                index: bestMove.end,\r\n                firstMove:false,  \r\n            }\r\n        }\r\n        cloneBoard[bestMove.start] = {\r\n            piece: Piece.Empty,\r\n            color: Color.None,\r\n            index: bestMove.start,\r\n            firstMove:false\r\n        }\r\n        return CalcScore(cloneBoard)\r\n    }\r\n    else return  isMaximizing ? -Infinity : Infinity\r\n}\r\n\r\nconst CalcScore = (board:IPosition[]):number => {\r\n    const lightPieces =  board.filter( s => s.color === Color.Light)\r\n    const darkPieces =  board.filter( s => s.color === Color.Dark)\r\n\r\n    var score = 0\r\n    darkPieces.forEach( p => score+= GetPoints(p))\r\n    lightPieces.forEach( p => score-=GetPoints(p))\r\n    return score\r\n}\r\n\r\nconst GetPoints = (piece:IPosition):number => {\r\n    if(piece.piece === Piece.King ) return KingPoints + ((piece.color === Color.Light) ? LKingPosPoints[piece.index] : DKingPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Queen ) return QueenPoints + QueenPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Bishop ) return BishopPoints + ((piece.color === Color.Light) ? LBishopPosPoints[piece.index] : DBishopPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Knight ) return KnightPoints + KnightPosPoints[piece.index]\r\n    else if(piece.piece === Piece.Rook ) return RookPoints + ((piece.color === Color.Light) ? LRookPosPoints[piece.index] : DRookPosPoints[piece.index])\r\n    else if(piece.piece === Piece.Pawn ) return PawnPoints + ((piece.color === Color.Light) ? LPawnPosPoints[piece.index] : DPawnPosPoints[piece.index])\r\n    else return 0\r\n} ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport './Board.css'\r\nimport { Piece, IPosition, Color, HandleMoves, CheckForPromotion, CheckForRightCastle, CheckForLeftCastle } from '../piece/piece'\r\nimport { Simulate, Move, boardsChecked } from '../simulation/simulation'\r\n\r\nconst Board = () => {\r\n    const GetRow = (idx:number):number => Math.floor( idx / 8 )\r\n    const GetCol = (idx:number):number => idx >= 8 ? idx % 8 : idx\r\n    const isLight = (idx:number) => ( GetRow(idx) % 2 ) === (GetCol(idx) % 2)\r\n    const isLightPiece = (idx:number) => board[idx].color === Color.Light \r\n    const isKing = (idx:number) =>  board[idx].piece === Piece.King\r\n    const isQueen = (idx:number) =>  board[idx].piece === Piece.Queen\r\n    const isBishop = (idx:number) =>  board[idx].piece === Piece.Bishop\r\n    const isKnight = (idx:number) =>  board[idx].piece === Piece.Knight\r\n    const isRook = (idx:number) =>  board[idx].piece === Piece.Rook\r\n    const isPawn = (idx:number) =>  board[idx].piece === Piece.Pawn\r\n    const SwapTurns = () => setTurn((turn === Color.Light) ? Color.Dark : Color.Light)\r\n    const isSelected = (idx:number) => selected === idx\r\n    const isAvailableMove = (idx:number) => availableMoves.includes(idx)\r\n    const isKillingMove = (idx:number) => killingMoves.includes(idx)\r\n    const InitializeBoard = ():IPosition[] => {\r\n        let newBoard:IPosition[] = new Array(64).fill({piece: Piece.Empty, color: Color.None, firstMove: true, index: -1})\r\n        newBoard.forEach( (_,i) => newBoard[i] = {piece: Piece.Empty, color: Color.None, firstMove: true, index: i})\r\n        newBoard[0] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 0}\r\n        newBoard[1] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 1}\r\n        newBoard[2] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 2}\r\n        newBoard[3] = {piece: Piece.Queen, color: Color.Dark, firstMove: true, index: 3}\r\n        newBoard[4] = {piece: Piece.King, color: Color.Dark, firstMove: true, index: 4}\r\n        newBoard[5] = {piece: Piece.Bishop, color: Color.Dark, firstMove: true, index: 5}\r\n        newBoard[6] = {piece: Piece.Knight, color: Color.Dark, firstMove: true, index: 6}\r\n        newBoard[7] = {piece: Piece.Rook, color: Color.Dark, firstMove: true, index: 7}\r\n        for(let i=8; i<16; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Dark, firstMove: true, index: i}\r\n\r\n        newBoard[56] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 56}\r\n        newBoard[57] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 57}\r\n        newBoard[58] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 58}\r\n        newBoard[59] = {piece: Piece.Queen, color: Color.Light, firstMove: true, index: 59}\r\n        newBoard[60] = {piece: Piece.King, color: Color.Light, firstMove: true, index: 60}\r\n        newBoard[61] = {piece: Piece.Bishop, color: Color.Light, firstMove: true, index: 61}\r\n        newBoard[62] = {piece: Piece.Knight, color: Color.Light, firstMove: true, index: 62}\r\n        newBoard[63] = {piece: Piece.Rook, color: Color.Light, firstMove: true, index: 63}\r\n        for(let i=48; i<56; i++) newBoard[i] = {piece: Piece.Pawn, color: Color.Light, firstMove: true, index: i}\r\n        return newBoard\r\n    }\r\n    const HandlePieceClick = (idx:number) => {    \r\n        if(availableMoves.includes(idx)){\r\n            const newBoard = [...board]\r\n            newBoard[idx] ={\r\n                ...board[selected],\r\n                index:idx,\r\n                firstMove: false\r\n            } \r\n            if(CheckForPromotion(idx,newBoard)){\r\n                newBoard[idx] = {\r\n                    piece: Piece.Queen,\r\n                    color: board[selected].color,\r\n                    index: idx,\r\n                    firstMove:false,  \r\n                }\r\n            }\r\n            else if(CheckForRightCastle(selected,board) && idx === selected + 2){\r\n                newBoard[idx-1] = {\r\n                    ...newBoard[idx+1],\r\n                    index: idx-1,\r\n                    firstMove: false\r\n                }\r\n                newBoard[idx+1] = {\r\n                    piece: Piece.Empty,\r\n                    color: Color.None,\r\n                    index: idx+1,\r\n                    firstMove: false\r\n                }\r\n            }\r\n            else if(CheckForLeftCastle(selected,board) && idx === selected - 2){\r\n                newBoard[idx+1] = {\r\n                    ...newBoard[idx-2],\r\n                    index: idx+1,\r\n                    firstMove: false\r\n                }\r\n                newBoard[idx-2] = {\r\n                    piece: Piece.Empty,\r\n                    color: Color.None,\r\n                    index: idx-2,\r\n                    firstMove: false\r\n                }\r\n            }\r\n            newBoard[selected] = {\r\n                piece: Piece.Empty,\r\n                color: Color.None,\r\n                index: selected,\r\n                firstMove: false\r\n            }\r\n            SetSelected(-1)\r\n            setBoard(newBoard)\r\n            setAvailableMoves([])\r\n            setKillingMoves([])\r\n            SwapTurns()\r\n        }\r\n        else{\r\n            SetSelected(idx)\r\n            if(board[idx].color === turn) setAvailableMoves(HandleMoves(board[idx],board))\r\n            else setAvailableMoves([])\r\n        }\r\n    }\r\n    const CheckForWin = () => {\r\n        var lightKing = false\r\n        var darkKing = false\r\n        board.forEach(s => {\r\n            if(s.piece === Piece.King) (s.color === Color.Light) ? lightKing = true : darkKing = true\r\n        })\r\n        if(lightKing === false) {\r\n            alert(\"Dark has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }\r\n        else if(darkKing === false){\r\n            alert(\"Light has won\")\r\n            ShowPopUp()\r\n            setGameOver(true)\r\n        }  \r\n    }\r\n    const MakeAiMove = (move:Move) => {\r\n        const newBoard = [...board]\r\n        newBoard[move.end] = {\r\n            ...newBoard[move.start],\r\n            firstMove: false,\r\n            index: move.end\r\n        }\r\n        if(CheckForPromotion(move.end,newBoard)){\r\n            newBoard[move.end] = {\r\n                piece: Piece.Queen,\r\n                color: newBoard[move.end].color,\r\n                index: move.end,\r\n                firstMove:false,  \r\n            }\r\n        }\r\n        newBoard[move.start] = {\r\n            piece: Piece.Empty,\r\n            color: Color.None,\r\n            firstMove: false,\r\n            index: move.start\r\n        }\r\n        setAiMoveStart(move.start)\r\n        setAiMoveFinish(move.end)\r\n        setBoard(newBoard)\r\n        SwapTurns()\r\n    }\r\n    const ShowPopUp = () => 5\r\n\r\n    const[board,setBoard] = useState( () => InitializeBoard())\r\n    const[turn,setTurn] = useState(Color.Light)\r\n    const[selected,SetSelected] = useState(-1)\r\n    const[availableMoves, setAvailableMoves] = useState([-1])\r\n    const[killingMoves,setKillingMoves] = useState([-1])\r\n    const[gameOver,setGameOver] = useState(false)\r\n    const[aiMoveStart,setAiMoveStart] = useState(-1)\r\n    const[aiMoveFinish,setAiMoveFinish] = useState(-1)\r\n\r\n    useEffect( () => {\r\n        const kMoves:number[] =[]\r\n        board.forEach( s => {\r\n            if(s.piece !== Piece.Empty && s.color !== turn){\r\n                if(availableMoves.includes(s.index)) kMoves.push(s.index)\r\n            }\r\n        })\r\n        setKillingMoves(kMoves)\r\n    }, [availableMoves])\r\n    useEffect(() => {\r\n        const GetMove = async () => {\r\n            if(turn === Color.Dark){\r\n                const move = await Simulate(board,3,Color.Dark)\r\n                MakeAiMove(move)\r\n            }\r\n        }\r\n        GetMove()\r\n    },[turn])\r\n\r\n    useEffect(() => CheckForWin())\r\n    useEffect(() => {\r\n        setBoard(InitializeBoard())\r\n        setGameOver(false)\r\n    },[gameOver])\r\n\r\n    return(\r\n        <div className='Board__container'>\r\n            <div className='Board__gameboard'>\r\n                {board.map( (_,idx) => {\r\n                    return( \r\n                    <div className={[\r\n                        'Board__space',\r\n                        `${isLight(idx) ? 'Board__spaceLight' : 'Board__spaceDark'}`,\r\n                        `${isKing(idx) ? isLightPiece(idx) ? 'Board__king-light' : 'Board__king-dark' : '' }`,\r\n                        `${isQueen(idx) ? isLightPiece(idx) ? 'Board__queen-light' : 'Board__queen-dark' : '' }`,\r\n                        `${isBishop(idx) ? isLightPiece(idx) ? 'Board__bishop-light' : 'Board__bishop-dark' : '' }`,\r\n                        `${isKnight(idx) ? isLightPiece(idx) ? 'Board__knight-light' : 'Board__knight-dark' : '' }`,\r\n                        `${isRook(idx) ? isLightPiece(idx) ? 'Board__rook-light' : 'Board__rook-dark' : '' }`,\r\n                        `${isPawn(idx) ? isLightPiece(idx) ? 'Board__pawn-light' : 'Board__pawn-dark' : '' }`,\r\n                        `${isSelected(idx) && 'Board__Selected'}`,\r\n                        `${isAvailableMove(idx) && 'Board__AvailableMove'}`,\r\n                        `${isKillingMove(idx) && 'Board__KillingMove'}`,\r\n                        `${idx === aiMoveStart && 'Board__AiMoveStart'}`,\r\n                        `${idx === aiMoveFinish && 'Board__AiMoveFinish'}`\r\n                    ].join(\" \")}\r\n                    onClick={() => HandlePieceClick(idx)}\r\n                    key={idx}>{idx}</div>)\r\n                })}\r\n            </div>\r\n            <h1>Number of boards evaluated: {boardsChecked}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <div className='Header__container'>\r\n            <div className='Header__title-container'>\r\n                <h1>Chess AI with Min Max Algorithm</h1>\r\n            </div>\r\n            <div className='Header__legend-container'>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__selected-index'/>\r\n                    <p>Selected Index</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__available-move'/>\r\n                    <p>Available Move</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__killing-move'/>\r\n                    <p>Taking Move</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__ai-start-pos'/>\r\n                    <p>AI Turn Start Position</p>\r\n                </div>\r\n                <div className='Header__legend-item'>\r\n                    <div className='Header__ai-finish-pos'/>\r\n                    <p>AI Turn End Position</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './App.css'\r\nimport Board from './components/Board/Board'\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header/>\r\n      <Board/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}